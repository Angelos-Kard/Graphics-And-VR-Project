#version 330 core

out vec4 fragmentColor;
in vec3 vertex_position_worldspace;
in vec3 vertex_position_cameraspace;
in vec3 Normal;

in vec2 UV;
in float vs_life;

uniform sampler2D texture0;
uniform vec3 lightPos;

struct Material{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float shininess;
};

struct Light{
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

void main() {
    //fragmentColor = vec4(texture(texture0, UV).rgb, 0.5f);
    vec3 objectColor = vec3(texture(texture0, UV).rgb);
    //fragmentColor = vec4(objectColor, 0.3f);

    //vec3 lightColor = vec3(1.0f, 1.0f, 1.0f);
    //vec3 lightPos = vec3(-50.0f, 30.0f, -40.0f);
    
    //Material
    Material material;
    material.ambient = vec3(0.0, 0.1, 0.06);
    material.diffuse = vec3(0.0, 0.50980392, 0.50980392);
    material.specular = vec3(0.50196078, 0.50196078, 0.50196078);
    material.shininess = 60;

    //Light
    Light light;
    light.position = lightPos;
    light.ambient = vec3(0.95, 0.95, 0.95);
    light.diffuse = vec3(0.95, 0.95, 0.95);
    light.specular = vec3(0.95, 0.95, 0.95);
    light.constant = 1.0;
    light.linear = 0.0014;
    light.quadratic = 0.000007;


    float distance_ = length(light.position - vertex_position_worldspace);
    float attenuation = 1.0/(light.constant + light.linear * distance_ + light.quadratic * (distance_ * distance_));

    //Ambient
    //float ambientStrength = 0.7;
    vec3 ambient = 0.7 * light.ambient;

    //Diffuse
    /*
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - vertex_position_worldspace);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * material.diffuse * light.diffuse;
    */
    vec3 N = normalize(Normal);
    vec3 L = normalize(light.position - vertex_position_cameraspace);
    float cosTheta = clamp(dot(L,N), 0, 1);

    vec3 diffuse = light.diffuse * cosTheta;///* material.diffuse 

    //Specular
    //float specularStrength = 3.0;
    /*
    vec3 viewDir = normalize(vertex_position_cameraspace - vertex_position_worldspace);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = 10 * material.specular * spec * light.specular;  
    */

    vec3 R = reflect(-L, N);
    vec3 E = normalize(-vertex_position_cameraspace);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    vec3 specular = light.specular * pow(cosAlpha, material.shininess);//* material.specular

    vec3 result = (ambient+diffuse+specular) * objectColor;
    fragmentColor = vec4(result, 0.8);
}
